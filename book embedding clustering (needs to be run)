books_nmf_embeddings = pd.read_csv('books_nmf_nmf_components.csv')
books_pca_embeddings = pd.read_csv('books_pca_pca_components.csv')
books_pca_info = pd.read_csv('books_pca_pca_info.csv')
books_svd_embeddings_S = pd.read_csv('books_svd_svd_S.csv')
books_svd_embeddings_U = pd.read_csv('books_svd_svd_U.csv')
books_svd_embeddings_V = pd.read_csv('books_svd_svd_V.csv')

km_models = [None, None]
km_sils = [None, None]
km_labels = [None, None]
km_cluster_sils = [None, None]
km_inertias = [None, None]
for x in range(2, 11):
    model = KMeans(n_clusters=x, init='random', n_init='auto', random_state=42)
    model.fit(books_pca_embeddings)
    km_models.append(model)
    km_labels.append(model.labels_)
    km_sils.append(silhouette_score(books_pca_embeddings, km_labels[x], metric='cosine'))
    km_cluster_sils.append(silhouette_samples(books_pca_embeddings, km_labels[x], metric='cosine'))
    km_inertias.append(model.inertia_)
    print(f'Model M_{x} finished')

svd_km_models, svd_km_sils, svd_km_labels, svd_km_cluster_sils, svd_km_inertias = {}, {}, {}, {}, {}
nmf_km_models, nmf_km_sils, nmf_km_labels, nmf_km_cluster_sils, nmf_km_inertias = {}, {}, {}, {}, {}

for x in range(2, 11):
    svd_model = KMeans(n_clusters=x, init='random', n_init='auto', random_state=42)
    svd_model.fit(books_svd_embeddings)
    svd_km_models[x] = svd_model
    svd_km_labels[x] = svd_model.labels_
    svd_km_sils[x] = silhouette_score(books_svd_embeddings, svd_km_labels[x], metric='euclidean') 
    svd_km_cluster_sils[x] = silhouette_samples(books_svd_embeddings, svd_km_labels[x], metric='euclidean') #Can adjust metric if we want
    svd_km_inertias[x] = svd_model.inertia_
    print(f'SVD Model M_{x} finished')

for x in range(2, 11):
    nmf_model = KMeans(n_clusters=x, init='random', n_init='auto', random_state=42)
    nmf_model.fit(books_nmf_embeddings)
    nmf_km_models[x] = nmf_model
    nmf_km_labels[x] = nmf_model.labels_
    nmf_km_sils[x] = silhouette_score(books_nmf_embeddings, nmf_km_labels[x], metric='euclidean')  
    nmf_km_cluster_sils[x] = silhouette_samples(books_nmf_embeddings, nmf_km_labels[x], metric='euclidean')
    nmf_km_inertias[x] = nmf_model.inertia_
    print(f'NMF Model M_{x} finished')
